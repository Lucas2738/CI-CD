pipeline{
    agent any
    environment {
        MOUDLE_HOME="demo/"
        MVN="/opt/apache-maven-3.8.4/bin/mvn"
        NEXUS_VERSION = "nexus"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "nexus:8081/nexus"
        NEXUS_REPOSITORY = "snapshots/"
        NEXUS_CREDENTIAL_ID = "nexus"
    }
    stages {
        stage('Clone sources') {
            steps {
                git branch: "master",  url: 'https://github.com/Lucas2738/complete.git'
            }
        }
        stage ('Compile Stage') {
            steps {
                sh "${MVN} package -DskipTests=true -f ./${MOUDLE_HOME}pom.xml" 
            }
        }
        stage('SonarQube analysis') {
            steps {
                sh "${MVN} clean verify sonar:sonar -DskipTests=true -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=b38ebaa971415340b7ef8854fc4791b1808a7432 -f ./${MOUDLE_HOME}pom.xml"
            }
        }
        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "${MOUDLE_HOME}pom.xml";
                    filesByGlob = findFiles(glob: "${MOUDLE_HOME}target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "jar"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        
    } 
}